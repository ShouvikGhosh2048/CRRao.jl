sanction = dataset("Zelig", "sanction")

CRRao.set_rng(StableRNG(123))
model = @fitmodel((Num ~ Target + Coop + NCost), sanction, NegBinomRegression())

@test coeftable(model).cols ≈ [
    [-1.1093939122450291, 0.011739761450927876, 1.0505950803719273, -0.204244271269866, 1.2714237997560502, 0.1767967980815313], 
    [0.45967698249863276, 0.14277865719023852, 0.1115559614400056, 0.5081560135824078, 0.2904270039669377, 0.2542906647846682], 
    [-2.413420629013829, 0.08222350372216905, 9.417650718172812, -0.40193221335703755, 4.377774044388756, 0.6952547716654944], 
    [0.015803569518871036, 0.9344689834574378, 4.612933013273268e-21, 0.6877339145215734, 1.1989755635885532e-5, 0.48689565293264725], 
    [-2.0103442424643996, -0.26810126440293097, 0.8319494136887768, -1.2002117564188337, 0.7021973318429798, -0.3216037465011672], 
    [-0.2084435820256586, 0.2915807873047867, 1.2692407470550777, 0.7917232138791016, 1.8406502676691208, 0.6751973426642297]
]
@test aic(model) ≈ 365.85804286542685
@test bic(model) ≈ 382.355004652254

tests = [
    (
        Prior_Ridge(),
        (
            parameters = [:λ, :α, Symbol("β[1]"), Symbol("β[2]"), Symbol("β[3]"), Symbol("β[4]"), Symbol("β[5]")], 
            mean = [2.0416346426202554, -1.0791532384091105, -0.004883290942372201, 1.0614560916349771, -0.1756717758832743, 1.280990656519003, 0.1492963997344524], 
            std = [0.44598061133557365, 0.51482915857406, 0.1614465208380804, 0.1319212220080617, 0.5562600234310773, 0.3213724365616413, 0.2799007240635552], 
            naive_se = [0.0044598061133557364, 0.0051482915857406, 0.001614465208380804, 0.0013192122200806169, 0.005562600234310773, 0.003213724365616413, 0.0027990072406355523], 
            mcse = [0.004522754651856957, 0.008910227137029792, 0.002344466729727223, 0.0019762733018128926, 0.0063483086169687205, 0.0035244394000428394, 0.003595774252727682], 
            ess = [8499.349766700354, 3405.406934716854, 4627.111720992979, 5046.902185315693, 8056.233791672022, 6779.1552091696185, 6164.911364209635], 
            rhat = [0.9999352760071969, 1.0010275525736414, 1.0009080604404403, 1.0000730765071426, 1.000149877127432, 0.9999292801975606, 1.0004167747542694]
        ),
        (
            [:λ, :α, Symbol("β[1]"), Symbol("β[2]"), Symbol("β[3]"), Symbol("β[4]"), Symbol("β[5]")], 
            [1.3158946543088654, -2.0865224176668957, -0.31798214777548467, 0.804622170344171, -1.2332088977649642, 0.65714154949533, -0.40638072700761096], 
            [1.7242660237445324, -1.4299784789693661, -0.11355096205807733, 0.9737998124857699, -0.5560521759187702, 1.0654254742145435, -0.037015035747441034], 
            [1.9927813229298224, -1.0907641791960945, -0.004379204071116164, 1.0593708607081123, -0.19923954483973078, 1.2743940859294127, 0.15011607272052452], 
            [2.3049020943799903, -0.7305831162361681, 0.10533147035014277, 1.1483239486654195, 0.20200549092389405, 1.48996092630409, 0.3387986778658283], 
            [3.0444646933603026, -0.07210795437412515, 0.3146435431832438, 1.3261945026562623, 0.9502045488437175, 1.9273607422511774, 0.6902902120159586]
        )
    ),
    (
        Prior_Laplace(),
        (
            parameters = [:λ, :α, Symbol("β[1]"), Symbol("β[2]"), Symbol("β[3]"), Symbol("β[4]"), Symbol("β[5]")], 
            mean = [2.105818191932673, -1.001366351668323, -0.020737929755620194, 1.046528089112684, -0.14255342845253, 1.2831927570565775, 0.11981993582140717], 
            std = [0.46112520745600866, 0.5020476204836056, 0.1582756533372808, 0.1301464933674048, 0.49956054933517235, 0.32447194955180514, 0.26560664786754307], 
            naive_se = [0.004611252074560087, 0.005020476204836056, 0.001582756533372808, 0.001301464933674048, 0.004995605493351723, 0.003244719495518051, 0.0026560664786754304], 
            mcse = [0.005179873388163286, 0.008352662669948885, 0.0021385466426288935, 0.0017343356927463193, 0.005695823968543294, 0.0034709801296962306, 0.0038698562785290103], 
            ess = [8213.667207958606, 3465.0499261387745, 5223.443426535646, 5029.941495072006, 7487.920109189577, 6912.623772511411, 5505.769928813317], 
            rhat = [0.999900538996812, 1.0000479364876054, 0.9999088611591701, 0.9999945429074747, 0.9999100042773318, 0.9999346892815522, 1.0000320124130493]
        ),
        (
            [:λ, :α, Symbol("β[1]"), Symbol("β[2]"), Symbol("β[3]"), Symbol("β[4]"), Symbol("β[5]")], 
            [1.34314698167072, -2.0082414778628745, -0.3373344384458916, 0.7926766227294012, -1.1412093746525867, 0.6479785243736373, -0.40256310319120714], 
            [1.7781867830100744, -1.3265572684322644, -0.12395657597995655, 0.9595456622639954, -0.4701577548474992, 1.0707445882753568, -0.0557823482586136], 
            [2.0522597766780653, -1.0000025353144744, -0.01899807655716824, 1.0454272940334917, -0.13787887245656635, 1.2823803223553283, 0.11583844484887736], 
            [2.378776401802887, -0.6729752337688133, 0.08234100539942203, 1.1337282467362826, 0.18007861816735327, 1.4966010229777014, 0.29804678135572943], 
            [3.1661837145336698, -0.020171322501938198, 0.29206545883471463, 1.3056473921111162, 0.8556935534397285, 1.9203420798844844, 0.6498510944463035]
        )
    ),
    (
        Prior_Cauchy(),
        (
            parameters = [:λ, :α, Symbol("β[1]"), Symbol("β[2]"), Symbol("β[3]"), Symbol("β[4]"), Symbol("β[5]")], 
            mean = [2.021874927222413, -1.023300682952993, -0.019183177470312545, 1.0534810230842946, -0.15523374837614287, 1.2742504243963195, 0.12980490677352682], 
            std = [0.43044968435607794, 0.5191567262552493, 0.16321720029316542, 0.13265333811141936, 0.5453110661222428, 0.32496233257970253, 0.2821507792862365], 
            naive_se = [0.004304496843560779, 0.005191567262552493, 0.0016321720029316541, 0.0013265333811141936, 0.005453110661222427, 0.0032496233257970253, 0.002821507792862365], 
            mcse = [0.0046632028808469275, 0.009149448437330164, 0.0024729031124144517, 0.0020581660030450865, 0.006941297485659084, 0.004142182560079393, 0.0036422484940396775], 
            ess = [7839.161358177565, 3193.5540694098077, 4320.992705020177, 4739.944839130463, 7763.727348494448, 6655.609296010192, 5253.257770813225], 
            rhat = [1.0001151451627839, 1.0010143698794152, 1.0005837914549367, 1.0007766538908125, 1.000237492815101, 1.0008360801436211, 1.0000480924496795]
        ),
        (
            [:λ, :α, Symbol("β[1]"), Symbol("β[2]"), Symbol("β[3]"), Symbol("β[4]"), Symbol("β[5]")], 
            [1.3225546607673735, -2.0538052590879174, -0.33748280732646224, 0.8001168639191415, -1.18251139326036, 0.6477927442155043, -0.4130581850886175], 
            [1.7126165653260053, -1.3647275844065412, -0.12854758183921683, 0.9647203169857478, -0.5300809622084945, 1.0553431169457062, -0.06125037781772656], 
            [1.973107401148558, -1.0180112137125175, -0.018905264494128812, 1.051553309888423, -0.16758965118327676, 1.2703581514085411, 0.13049040547020957], 
            [2.275697028265146, -0.6732764408040561, 0.08812218720768103, 1.1418008457110775, 0.20103009950128206, 1.4870241564158306, 0.316562670334154], 
            [2.980412015970354, -0.020714182888579093, 0.30419390650812983, 1.313845258195228, 0.9589129824935364, 1.9318716055638194, 0.6901022929135681]
        )
    ),
    (
        Prior_TDist(),
        (
            parameters = [:λ, :ν, :α, Symbol("β[1]"), Symbol("β[2]"), Symbol("β[3]"), Symbol("β[4]"), Symbol("β[5]")], 
            mean = [2.0020838750468664, 20.49781016598409, -1.0562300436813943, -0.009563249753152554, 1.05814429635193, -0.17251508068105154, 1.2762153213808851, 0.13995539765782142], 
            std = [0.42624013154052803, 213.52741783868396, 0.5154349351870382, 0.1616653443782944, 0.1307847870841479, 0.539558476698224, 0.32219328105255174, 0.2822140654641766], 
            naive_se = [0.004262401315405281, 2.1352741783868394, 0.005154349351870382, 0.001616653443782944, 0.001307847870841479, 0.00539558476698224, 0.003221932810525517, 0.0028221406546417656], 
            mcse = [0.004829453998365435, 2.747290458343302, 0.007575518449516524, 0.0022250329376999355, 0.0016049954901419887, 0.005629721325878676, 0.0036175670524373274, 0.0036517700398201263], 
            ess = [7946.618177325468, 6455.119327500337, 4162.056514781839, 5232.327485505857, 5850.33141806781, 7961.171809321584, 7541.085472731242, 6538.084663769089], 
            rhat = [0.9999486521708613, 0.9999384971581877, 1.0009715657664622, 1.0004629089269812, 1.0004015624832308, 0.9999270722523357, 0.9999002597426615, 1.00090800916806]
        ),
        (
            [:λ, :ν, :α, Symbol("β[1]"), Symbol("β[2]"), Symbol("β[3]"), Symbol("β[4]"), Symbol("β[5]")], 
            [1.2971814438279852, 0.6529040255936679, -2.0693529757849642, -0.3337638005533473, 0.8045787822606484, -1.2170401402778344, 0.6518714608579222, -0.40451994683224035], 
            [1.6982935013409182, 1.9144334399597727, -1.4014311019149646, -0.11757898473858268, 0.9694797522172892, -0.5365654438102705, 1.0550980531201006, -0.05109047434619425], 
            [1.9536379077661663, 3.8831295363504834, -1.0564874012581749, -0.008985177541618154, 1.0576003188952314, -0.18789738722787444, 1.2762277535618765, 0.13770467226007288], 
            [2.25279227014942, 9.730335504456834, -0.7075937221669208, 0.09794363591636085, 1.148248163624761, 0.18059955987755727, 1.49096653763328, 0.331424394842133], 
            [2.9703844239237407, 108.99703146536088, -0.06955169860921168, 0.30561435335096154, 1.3157277062565802, 0.9140050577304814, 1.9132711094010042, 0.6957255342014631]
        )
    )
]

for (prior,test_summaries,test_quantiles) in tests
    CRRao.set_rng(StableRNG(123))
    model = @fitmodel((Num ~ Target + Coop + NCost), sanction, NegBinomRegression(), prior)

    #Split summaries and quantiles into symbols and numbers for testing equality/approximate equality. 
    model_summaries, model_quantiles = describe(model.chain)
    (model_summaries_symbols, model_summaries_nums...) = model_summaries.nt
    (model_quantiles_symbols, model_quantiles_nums...) = model_quantiles.nt
    (test_summaries_symbols, test_summaries_nums...) = test_summaries
    (test_quantiles_symbols, test_quantiles_nums...) = test_quantiles

    @test model_summaries_symbols == test_summaries_symbols
    for i in 1:length(test_summaries_nums)
        @test model_summaries_nums[i] ≈ test_summaries_nums[i]
    end
    @test model_quantiles_symbols == test_quantiles_symbols
    for i in 1:length(test_quantiles_nums)
        @test model_quantiles_nums[i] ≈ test_quantiles_nums[i]
    end
end